services:
  mosquitto-init:
    image: eclipse-mosquitto:2.0
    command: >-
      sh -c "mosquitto_passwd -b -c /mosquitto/config/passwordfile $${MQTT_USERNAME} $${MQTT_PASSWORD}"
    volumes:
      - mosquitto_conf:/mosquitto/config
    env_file: .env

  mosquitto:
    image: eclipse-mosquitto:2.0
    depends_on:
      mosquitto-init:
        condition: service_completed_successfully
    ports:
      - "${MQTT_PORT}:1883"
    volumes:
      - mosquitto_conf:/mosquitto/config
      - mosquitto_data:/mosquitto/data
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h 127.0.0.1 -p 1883 -t health -m ok -u \"$MQTT_USERNAME\" -P \"$MQTT_PASSWORD\""]
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address :${MINIO_CONSOLE_PORT}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 10

  minio-setup:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >-
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb -p local/${MINIO_BUCKET} || true &&
      mc anonymous set none local/${MINIO_BUCKET} || true
      "
    env_file: .env

  consumer:
    build: ./consumer
    depends_on:
      mosquitto:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    environment:
      MQTT_BROKER_URL: mqtt://mosquitto:1883
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      MINIO_END_POINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: 'false'
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_REGION: ${MINIO_REGION}
      CONSUMER_BATCH_MAX_MESSAGES: ${CONSUMER_BATCH_MAX_MESSAGES}
      CONSUMER_BATCH_MAX_INTERVAL_MS: ${CONSUMER_BATCH_MAX_INTERVAL_MS}
      CONSUMER_LOG_LEVEL: ${CONSUMER_LOG_LEVEL}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 5

  postgis:
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgis-setup:
    image: postgis/postgis:16-3.4
    depends_on:
      postgis:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    entrypoint: ["bash", "-lc"]
    command: >-
      "psql -h postgis -U $POSTGRES_USER -d $POSTGRES_DB -v ON_ERROR_STOP=1 -c \"CREATE DATABASE $POSTGRES_AIRFLOW_DB;\" 2>/dev/null || true &&
       psql -h postgis -U $POSTGRES_USER -d $POSTGRES_DB -v ON_ERROR_STOP=1 -c \"CREATE DATABASE $POSTGRES_GIS_DB;\" 2>/dev/null || true &&
       psql -h postgis -U $POSTGRES_USER -d $POSTGRES_GIS_DB -v ON_ERROR_STOP=1 -c \"CREATE EXTENSION IF NOT EXISTS postgis; CREATE EXTENSION IF NOT EXISTS postgis_topology;\""

  airflow-init:
    image: ${AIRFLOW_IMAGE}
    depends_on:
      postgis:
        condition: service_healthy
      postgis-setup:
        condition: service_completed_successfully
    env_file: .env
    user: "${AIRFLOW_UID}:0"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/requirements.txt
    entrypoint: /bin/bash
    command: -c "pip install --no-cache-dir --constraint \"$AIRFLOW_CONSTRAINTS_URL\" -r /requirements.txt && \
      airflow db migrate && \
      airflow users create --role Admin --username \"$AIRFLOW_ADMIN_USER\" --password \"$AIRFLOW_ADMIN_PASSWORD\" --firstname Admin --lastname User --email \"$AIRFLOW_ADMIN_EMAIL\""

  airflow-webserver:
    image: ${AIRFLOW_IMAGE}
    depends_on:
      postgis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    env_file: .env
    user: "${AIRFLOW_UID}:0"
    command: webserver
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  airflow-scheduler:
    image: ${AIRFLOW_IMAGE}
    depends_on:
      postgis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    env_file: .env
    user: "${AIRFLOW_UID}:0"
    command: scheduler
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins

volumes:
  mosquitto_conf:
  mosquitto_data:
  minio_data:
  pgdata:
  airflow_logs:


